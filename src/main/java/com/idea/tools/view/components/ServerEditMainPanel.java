package com.idea.tools.view.components;

import com.idea.tools.dto.ConnectionType;
import com.idea.tools.dto.ServerDto;
import com.idea.tools.dto.ServerType;
import com.idea.tools.view.ServerEditPanel;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.ui.EnumComboBoxModel;
import com.intellij.ui.components.JBScrollPane;

import javax.swing.*;
import javax.swing.event.DocumentListener;
import java.util.Objects;

import static com.idea.tools.utils.GuiUtils.createNumberInputField;
import static com.idea.tools.utils.GuiUtils.simpleListener;
import static com.idea.tools.utils.Utils.getOrDefault;
import static com.idea.tools.utils.Utils.toInteger;
import static java.awt.BorderLayout.CENTER;
import static org.apache.commons.lang3.StringUtils.isNotEmpty;

public class ServerEditMainPanel extends JPanel {

    private ServerEditPanel serverEditPanel;

    private JPanel rootPanel;
    private JComboBox<ServerType> typeComboBox;
    private JComboBox<ConnectionType> connectionType;
    private JTextField hostField;
    private JFormattedTextField portField;
    private JTextField loginField;
    private JPasswordField passwordField;
    private JTextField idField;
    private JTextField nameField;

    public ServerEditMainPanel(ServerEditPanel serverEditPanel) {
        this.serverEditPanel = serverEditPanel;
        render();
    }

    private void render() {
        add(new JBScrollPane(rootPanel), CENTER);

        ServerDto server = serverEditPanel.getServer();

        setValues(server);

        DocumentListener validator = simpleListener(event -> enableButtons());

        typeComboBox.addActionListener(event -> updateConnectionTypeModel());

        hostField.addActionListener(event -> updateNameFieldValue());
        hostField.getDocument().addDocumentListener(simpleListener(event -> updateNameFieldValue()));
        hostField.getDocument().addDocumentListener(validator);

        portField.addActionListener(event -> updateNameFieldValue());
        portField.getDocument().addDocumentListener(simpleListener(event -> updateNameFieldValue()));
        portField.getDocument().addDocumentListener(validator);

        nameField.addActionListener(event -> server.setNameIsAutogenerated(false));
        nameField.getDocument().addDocumentListener(simpleListener(event -> server.setNameIsAutogenerated(false)));
    }

    private void enableButtons() {
        boolean requiredFieldsAreFilled = requiredFieldsAreFilled();
        serverEditPanel.getSaveButton().setEnabled(requiredFieldsAreFilled);
        serverEditPanel.getTestConnectionButton().setEnabled(requiredFieldsAreFilled);
    }

    private boolean requiredFieldsAreFilled() {
        return isNotEmpty(hostField.getText()) && isNotEmpty(portField.getText());
    }

    public void fillServer(ServerDto server) {
        server.setType(typeComboBox.getItemAt(typeComboBox.getSelectedIndex()));
        server.setConnectionType(connectionType.getItemAt(connectionType.getSelectedIndex()));
        server.setHost(hostField.getText());
        server.setPort(toInteger(portField.getText()));
        server.setLogin(loginField.getText());
        server.setPassword(String.valueOf(passwordField.getPassword()));
        server.setName(nameField.getText());
    }

    public void setValues(ServerDto server) {
        idField.setText(server.getId());
        typeComboBox.setSelectedItem(getOrDefault(server.getType(), ServerType.ARTEMIS));
        updateConnectionTypeModel();
        if (server.getConnectionType() != null) {
            connectionType.setSelectedItem(server.getConnectionType());
        }
        hostField.setText(getOrDefault(server.getHost(), "localhost"));
        portField.setValue(server.getPort());
        nameField.setText(server.getName());
        loginField.setText(server.getLogin());
        passwordField.setText(server.getPassword());

        updateNameFieldValue();
        enableButtons();
    }

    private void updateNameFieldValue() {
        ServerDto server = serverEditPanel.getServer();
        if (server.isNameIsAutogenerated()) {
            String host = hostField.getText();
            String port = Objects.toString(portField.getValue());
            if (isNotEmpty(host)) {
                String value = host;
                if (isNotEmpty(port)) {
                    value += ":" + port;
                }
                nameField.setText(value);
                server.setNameIsAutogenerated(true);
            }
        }
    }

    private void updateConnectionTypeModel() {
        ConnectionType[] types = typeComboBox.getItemAt(typeComboBox.getSelectedIndex()).getConnectionTypes();
        connectionType.setModel(new DefaultComboBoxModel<>(types));
        if (types.length != 0) {
            connectionType.setSelectedItem(types[0]);
        }
        connectionType.repaint();
    }


    private void createUIComponents() {
        typeComboBox = new ComboBox<>(new EnumComboBoxModel<>(ServerType.class));
        connectionType = new ComboBox<>();
        portField = createNumberInputField();
    }
}
