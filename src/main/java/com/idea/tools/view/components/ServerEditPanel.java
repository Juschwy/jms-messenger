package com.idea.tools.view.components;

import com.idea.tools.dto.ConnectionType;
import com.idea.tools.dto.Server;
import com.idea.tools.dto.ServerType;
import com.idea.tools.utils.Utils;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.ui.EnumComboBoxModel;
import com.intellij.ui.JBColor;
import lombok.Getter;

import javax.swing.*;
import javax.swing.event.DocumentListener;
import java.util.Objects;

import static com.idea.tools.App.serverService;
import static com.idea.tools.utils.GuiUtils.createNumberInputField;
import static com.idea.tools.utils.GuiUtils.simpleListener;
import static com.idea.tools.utils.Utils.getOrDefault;
import static org.apache.commons.lang3.StringUtils.isNotEmpty;

public class ServerEditPanel extends JPanel {

    private static final String CONNECTION_SUCCESS_TEXT = "Success";
    private static final String CONNECTION_FAIL_TEXT = "Fail";
    private static final JBColor CONNECTION_SUCCESS_COLOR = JBColor.GREEN;
    private static final JBColor CONNECTION_FAIL_COLOR = JBColor.RED;

    private Server server;

    private JPanel rootPanel;
    private JComboBox<ServerType> typeComboBox;
    private JComboBox<ConnectionType> connectionType;
    private JTextField hostField;
    private JFormattedTextField portField;
    private JTextField loginField;
    private JPasswordField passwordField;
    private JTextField classField;
    private JButton testConnectionButton;
    @Getter
    private JButton cancelButton;
    @Getter
    private JButton saveButton;
    private JTextField idField;
    private JTextField nameField;
    private JLabel connectionStatus;

    public ServerEditPanel() {
        this(new Server());
    }

    public ServerEditPanel(Server server) {
        this.server = server;
        render();
    }

    public void setNewValue(Server server) {
        this.server = server;
        setValues();
        enableButtons();
    }

    private void render() {
        add(rootPanel);

        setValues();
        enableButtons();

        DocumentListener validator = simpleListener(event -> enableButtons());

        typeComboBox.addActionListener(event -> updateConnectionTypeModel());

        hostField.addActionListener(event -> updateNameFieldValue());
        hostField.getDocument().addDocumentListener(simpleListener(event -> updateNameFieldValue()));
        hostField.getDocument().addDocumentListener(validator);

        portField.addActionListener(event -> updateNameFieldValue());
        portField.getDocument().addDocumentListener(simpleListener(event -> updateNameFieldValue()));
        portField.getDocument().addDocumentListener(validator);

        nameField.addActionListener(event -> server.setNameIsAutogenerated(false));
        nameField.getDocument().addDocumentListener(simpleListener(event -> server.setNameIsAutogenerated(false)));

        testConnectionButton.addActionListener(event -> {
            fillServer();
            if (serverService().testConnection(server)) {
                connectionStatus.setText(CONNECTION_SUCCESS_TEXT);
                connectionStatus.setForeground(CONNECTION_SUCCESS_COLOR);
            } else {
                connectionStatus.setText(CONNECTION_FAIL_TEXT);
                connectionStatus.setForeground(CONNECTION_FAIL_COLOR);
            }
            connectionStatus.setVisible(true);
        });

        saveButton.addActionListener(event -> {
            fillServer();
            serverService().saveOrUpdate(server);
        });

        cancelButton.addActionListener(event -> {
            setValues();
            enableButtons();
        });
    }

    private void enableButtons() {
        boolean requiredFieldsAreFilled = requiredFieldsAreFilled();
        saveButton.setEnabled(requiredFieldsAreFilled);
        testConnectionButton.setEnabled(requiredFieldsAreFilled);
    }

    private boolean requiredFieldsAreFilled() {
        return isNotEmpty(hostField.getText()) && isNotEmpty(portField.getText()) && !portField.getText().equals("0");
    }

    private void fillServer() {
        server.setType(typeComboBox.getItemAt(typeComboBox.getSelectedIndex()));
        server.setConnectionType(connectionType.getItemAt(connectionType.getSelectedIndex()));
        server.setHost(hostField.getText());
        Long portValue = (Long) portField.getValue();
        server.setPort(portValue.intValue());
        server.setLogin(loginField.getText());
        server.setPassword(String.valueOf(passwordField.getPassword()));
        server.setClazz(classField.getText());
        server.setName(nameField.getText());
    }

    private void setValues() {
        idField.setText(Utils.toString(server.getId()));
        typeComboBox.setSelectedItem(getOrDefault(server.getType(), ServerType.WILDFLY_11));
        if (server.getConnectionType() != null) {
            connectionType.setSelectedItem(server.getConnectionType());
        } else {
            updateConnectionTypeModel();
        }
        hostField.setText(server.getHost());
        portField.setValue(server.getPort());
        nameField.setText(server.getName());
        loginField.setText(server.getLogin());
        passwordField.setText(server.getPassword());
        classField.setText(server.getClazz());
    }

    private void updateNameFieldValue() {
        if (server.isNameIsAutogenerated()) {
            String host = hostField.getText();
            String port = Objects.toString(portField.getValue());
            if (isNotEmpty(host)) {
                String value = host;
                if (isNotEmpty(port)) {
                    value += ":" + port;
                }
                nameField.setText(value);
                server.setNameIsAutogenerated(true);
            }
        }
    }

    private void updateConnectionTypeModel() {
        ConnectionType[] types = typeComboBox.getItemAt(typeComboBox.getSelectedIndex()).getConnectionTypes();
        connectionType.setModel(new DefaultComboBoxModel<>(types));
        if (types.length != 0) {
            connectionType.setSelectedItem(types[0]);
        }
        connectionType.repaint();
    }


    private void createUIComponents() {
        typeComboBox = new ComboBox<>(new EnumComboBoxModel<>(ServerType.class));
        connectionType = new ComboBox<>();
        portField = createNumberInputField();
    }
}
