package com.idea.tools.view.components;

import com.idea.tools.dto.ConnectionType;
import com.idea.tools.dto.Server;
import com.idea.tools.dto.ServerType;
import com.idea.tools.utils.Utils;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.ui.EnumComboBoxModel;
import lombok.Getter;

import javax.swing.*;
import java.util.Objects;

import static com.idea.tools.App.serverService;
import static com.idea.tools.utils.GuiUtils.createNumberInputField;
import static com.idea.tools.utils.GuiUtils.simpleListener;
import static com.idea.tools.utils.Utils.getOrDefault;
import static com.idea.tools.utils.Utils.isNotEmpty;

public class ServerEditPanel extends JPanel {

    private Server server;

    private JPanel rootPanel;
    private JComboBox<ServerType> typeComboBox;
    private JComboBox<ConnectionType> connectionType;
    private JTextField hostField;
    private JFormattedTextField portField;
    private JTextField loginField;
    private JPasswordField passwordField;
    private JTextField classField;
    private JButton testConnectionButton;
    @Getter
    private JButton cancelButton;
    @Getter
    private JButton saveButton;
    private JTextField idField;
    private JTextField nameField;

    public ServerEditPanel() {
        this(new Server());
    }

    public ServerEditPanel(Server server) {
        this.server = server;
        render();
    }

    public void setNewValue(Server server) {
        this.server = server;
        setValues();
    }

    private void render() {
        typeComboBox.setName("typeComboBox");
        connectionType.setName("connectionType");
        hostField.setName("hostField");
        portField.setName("portField");
        loginField.setName("loginField");
        passwordField.setName("passwordField");
        testConnectionButton.setName("testConnectionButton");
        cancelButton.setName("cancelButton");
        saveButton.setName("saveButton");
        classField.setName("classField");
        idField.setName("idField");
        add(rootPanel);

        setValues();

        typeComboBox.addActionListener(event -> updateConnectionTypeModel());
        hostField.addActionListener(event -> updateNameFieldValue());
        hostField.getDocument().addDocumentListener(simpleListener(event -> updateNameFieldValue()));
        portField.getDocument().addDocumentListener(simpleListener(event -> updateNameFieldValue()));
        portField.addActionListener(event -> updateNameFieldValue());
        nameField.addActionListener(event -> server.setNameIsAutogenerated(false));
        nameField.getDocument().addDocumentListener(simpleListener(event -> server.setNameIsAutogenerated(false)));

        saveButton.addActionListener(event -> {
            server.setType(typeComboBox.getItemAt(typeComboBox.getSelectedIndex()));
            server.setConnectionType(connectionType.getItemAt(connectionType.getSelectedIndex()));
            server.setHost(hostField.getText());
            server.setPort((Integer) portField.getValue());
            server.setLogin(loginField.getText());
            server.setPassword(String.valueOf(passwordField.getPassword()));
            server.setClazz(classField.getText());
            server.setName(nameField.getText());
            serverService().saveOrUpdate(server);
        });

        cancelButton.addActionListener(event -> setValues());
    }

    private void setValues() {
        idField.setText(Utils.toString(server.getId()));
        typeComboBox.setSelectedItem(getOrDefault(server.getType(), ServerType.WILDFLY_11));
        if (server.getConnectionType() != null) {
            connectionType.setSelectedItem(server.getConnectionType());
        } else {
            updateConnectionTypeModel();
        }
        hostField.setText(server.getHost());
        portField.setValue(server.getPort());
        nameField.setText(server.getName());
        loginField.setText(server.getLogin());
        passwordField.setText(server.getPassword());
        classField.setText(server.getClazz());
    }

    private void updateNameFieldValue() {
        if (server.isNameIsAutogenerated()) {
            String host = hostField.getText();
            String port = Objects.toString(portField.getValue());
            if (isNotEmpty(host)) {
                String value = host;
                if (isNotEmpty(port)) {
                    value += ":" + port;
                }
                nameField.setText(value);
                server.setNameIsAutogenerated(true);
            }
        }
    }

    private void updateConnectionTypeModel() {
        ConnectionType[] types = ConnectionType.getConnectionTypes(typeComboBox.getItemAt(typeComboBox.getSelectedIndex()));
        connectionType.setModel(new DefaultComboBoxModel<>(types));
        if (types.length != 0) {
            connectionType.setSelectedItem(types[0]);
        }
        connectionType.repaint();
    }


    private void createUIComponents() {
        // TODO: place custom component creation code here
        typeComboBox = new ComboBox<>(new EnumComboBoxModel<>(ServerType.class));
        connectionType = new ComboBox<>();
        portField = createNumberInputField();
    }
}
